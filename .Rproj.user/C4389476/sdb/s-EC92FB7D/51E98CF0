{
    "contents" : "#' @title extrema.irr\n#' @aliases  extrema.irr\n#' @author Pierre Roudier\n#' @description Finds regional extrema on a irregularly sampled data set\n#' @include create_neig.r\n# new implementation\n # user      system   elapsed\n # 38.4      0.004    38.409 # 300\n # 290.224   1.164    292.347 #1290\n# original implementation\n # user     system  elapsed\n # 39.044   0.016   39.131\n # 301.188   0.576 302.909\n # 3434.312   31.084    3701.952\n\nextrema.irr <- function(\n  data.set,\n  gridded.data,\n  neig = NULL,\n  zcol = 'z',\n  duplicate = 'remove',\n  nb.nn = 4, # Number of nearest neighbours to take into account if data is on a grid\n  thresh.extrema = 1, # Significative threshold for the extrema\n  verbose = FALSE\n){\n  if (is.null(neig)) {\n    cat(\"\\t\\tWARNING : Old-style neig generation. This might be time-consuming.\\n\")\n    neig <- create.neig(\n      data.set,\n      nb.nn = nb.nn,\n      duplicate = 'remove',\n      verbose = verbose\n    )\n  }\n  else {\n    if (!any(class(neig) != \"neig\")) stop(\"neig needs to be generated through the create.neig function.\")\n  }\n\n  #require(data.table)\n  # Adding some extrema attributes\n  neig$is.minima <- vector(mode='logical', length = neig$n)\n  neig$is.maxima <- vector(mode='logical', length = neig$n)\n\n  # vectorize condition\n  candidat_p <- vector(mode='list',length = neig$n)\n  candidat_n <- vector(mode='list',length = neig$n)\n  amplitude.max <- vector(mode='integer',length = neig$n)\n\n  # Adding the value attribute\n  neig$value <- data.set[[zcol]]\n\n  #neig <- data.table(neig)\n\n\n  # Initialisation\n  k <- 1\n\n  # Optimisation possible\n  # datat.table\n  # parallelisation\n  # library(doMC) # Use doMC package\n  # registerDoMC() # Determine number of cores to use, default = #cores/2\n  i_point=1\n  #tini1 <- proc.time()\n  # For each point of the triangulation object\n  for (i_point in (1:neig$n)) {\n    #candidat <- 0\n    #amplitude.max <- 0\n    voisins <- neig$neig[[i_point]]\n    #diff neig$value[i_point] - neig$value[voisins]\n    candidat_p[i_point] <- (neig$value[i_point] - neig$value[voisins])>0\n    candidat_n[i_point] <- (neig$value[i_point] - neig$value[voisins])<0\n\n    amplitude.max[i_point] <- list(neig$value[i_point] - neig$value[voisins])\n    #k <- k + length(voisins)\n  }\n\n  #candidat_n <- lapply(candidat_n, function(x) x<0)\n  #candidat_p <- lapply(candidat_p, function(x) x>0)\n\n  candidat_n <- -1*unlist(lapply(candidat_n, sum))\n  candidat_p <- unlist(lapply(candidat_p, sum))\n  amplitude.max <- unlist(lapply(amplitude.max, function(x) max(abs(x))))\n\n  n_neig <- unlist(lapply(neig$neig,length))\n  abs_amplitude <- abs(amplitude.max)\n  neig$is.minima[which(( abs_amplitude >= thresh.extrema) & (candidat_n == -1*n_neig))] <- TRUE\n  neig$is.maxima[which(((abs_amplitude  >= thresh.extrema) & (candidat_p == n_neig)))] <- TRUE\n\n\n  n.extrema <- length(which(neig$is.minima)) + length(which(neig$is.maxima))\n  cat(paste('\\t\\t\\tFound ',n.extrema,\n            ' extrema points (',length(which(neig$is.minima)), ' minima, ',\n            length(which(neig$is.maxima)),' maxima)\\n',sep=''))\n\n\n  class(neig) <- c(class(neig),\"extrema\")\n\n  return(neig)\n}\n",
    "created" : 1487954759756.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2955613890",
    "id" : "51E98CF0",
    "lastKnownWriteTime" : 1487955020,
    "path" : "~/Script/R/spemd2/spemd/R/extrema_irr.r",
    "project_path" : "R/extrema_irr.r",
    "properties" : {
    },
    "relative_order" : 9,
    "source_on_save" : false,
    "type" : "r_source"
}